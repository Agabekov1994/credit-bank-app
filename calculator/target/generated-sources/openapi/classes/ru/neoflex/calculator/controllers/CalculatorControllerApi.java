/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.neoflex.calculator.controllers;

import ru.neoflex.calculator.model.dto.CreditDTO;
import ru.neoflex.calculator.model.dto.LoanOfferDTO;
import ru.neoflex.calculator.model.dto.LoanStatementRequestDTO;
import ru.neoflex.calculator.model.dto.ScoringDataDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-07-20T01:26:53.519840700+04:00[Europe/Saratov]")
@Validated
@Tag(name = "CalculatorController", description = "the CalculatorController API")
public interface CalculatorControllerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/calculator/calc : валидация присланных данных + скоринг данных + полный расчет параметров кредита
     *
     * @param scoringDataDTO Валидация присланных данных + скоринг данных + полный расчет параметров кредита. (required)
     * @return успешно (status code 200)
     *         or некорректные данные (status code 400)
     */
    @Operation(
        operationId = "calc",
        summary = "валидация присланных данных + скоринг данных + полный расчет параметров кредита",
        tags = { "CalculatorController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "успешно", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreditDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "некорректные данные")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/calculator/calc",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    
    default CreditDTO calc(
        @Parameter(name = "ScoringDataDTO", description = "Валидация присланных данных + скоринг данных + полный расчет параметров кредита.", required = true) @Valid @RequestBody ScoringDataDTO scoringDataDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amount\" : 1000000.0, \"isSalaryClient\" : true, \"monthlyPayment\" : 10000.1, \"rate\" : 12.5, \"paymentSchedule\" : [ { \"date\" : \"2022-06-01T00:00:00.000+00:00\", \"interestPayment\" : 12000.0, \"number\" : 1, \"totalPayment\" : 12000.0, \"debtPayment\" : 5000.0, \"remainingDebt\" : 95000.0 }, { \"date\" : \"2022-06-01T00:00:00.000+00:00\", \"interestPayment\" : 12000.0, \"number\" : 1, \"totalPayment\" : 12000.0, \"debtPayment\" : 5000.0, \"remainingDebt\" : 95000.0 } ], \"psk\" : 12.5, \"term\" : 24, \"isInsuranceEnabled\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        throw new IllegalArgumentException("Not implemented");

    }


    /**
     * POST /api/v1/calculator/offers : расчёт возможных условий кредита
     *
     * @param loanStatementRequestDTO Расчёт возможных условий кредита. (required)
     * @return успешно (status code 200)
     *         or некорректные данные (status code 400)
     */
    @Operation(
        operationId = "offers",
        summary = "расчёт возможных условий кредита",
        tags = { "CalculatorController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "успешно", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LoanOfferDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "некорректные данные")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/calculator/offers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    
    default List<LoanOfferDTO> offers(
        @Parameter(name = "LoanStatementRequestDTO", description = "Расчёт возможных условий кредита.", required = true) @Valid @RequestBody LoanStatementRequestDTO loanStatementRequestDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"totalAmount\" : 1000000.0, \"isSalaryClient\" : true, \"monthlyPayment\" : 10000.1, \"rate\" : 12.5, \"statementId\" : \"3422b448-2460-4fd2-9183-8000de6f8343\", \"requestedAmount\" : 1000000.0, \"term\" : 24, \"isInsuranceEnabled\" : true }, { \"totalAmount\" : 1000000.0, \"isSalaryClient\" : true, \"monthlyPayment\" : 10000.1, \"rate\" : 12.5, \"statementId\" : \"3422b448-2460-4fd2-9183-8000de6f8343\", \"requestedAmount\" : 1000000.0, \"term\" : 24, \"isInsuranceEnabled\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        throw new IllegalArgumentException("Not implemented");

    }

}
